#!/usr/bin/env bash
set -euo pipefail

AUTHOR="Alex Clairr"
COPY="© $(date +%Y) Alex Clairr"
HOOK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WATERMARK_SCRIPT="$HOOK_DIR/watermark.py"

# Detect Python executable (prefer virtual environment)
if [ -n "${VIRTUAL_ENV:-}" ]; then
  PYTHON="$VIRTUAL_ENV/bin/python"
elif [ -f "venv/bin/python" ]; then
  PYTHON="./venv/bin/python"
elif [ -f ".venv/bin/python" ]; then
  PYTHON="./.venv/bin/python"
else
  PYTHON="python3"
fi

echo "[pre-commit] Using Python: $PYTHON"

echo "[pre-commit] Starting comprehensive image processing..."

# ===== PART 1: Process new/modified images =====
echo "[pre-commit] Step 1: Processing new/modified images..."

# List of STAGED files for this commit (additions/modifications), terminated by NUL
staged_images=$(git diff --cached --name-only -z --diff-filter=ACM | tr '\0' '\n' | grep -Ei '\.(jpe?g|png|webp)$' || true)

if [ -n "$staged_images" ]; then
  echo "[pre-commit] Found new/modified images:"
  echo "$staged_images" | sed 's/^/  - /'
  echo

  # Process each staged image
  git diff --cached --name-only -z --diff-filter=ACM \
  | while IFS= read -r -d '' f; do
    case "$f" in
      *.jpg|*.jpeg|*.JPG|*.JPEG|*.png|*.PNG|*.webp|*.WEBP)
        echo "[pre-commit] Processing new image: $f"
        
        # 1) Apply invisible watermark (may convert JPG to PNG)
        if "$PYTHON" "$WATERMARK_SCRIPT" apply "$f"; then
          echo "[pre-commit] ✓ Watermark applied: $f"
        else
          echo "[pre-commit] ✗ Failed to apply watermark: $f"
          exit 1
        fi
        
        # 2) Determine which file to process for EXIF (JPG may have been converted to PNG)
        if [ -f "$f" ]; then
          # Original file still exists
          target_file="$f"
        else
          # File was converted (JPG to PNG)
          base_name="${f%.*}"
          target_file="${base_name}.png"
        fi
        
        # 3) Clean EXIF and add copyright on the target file
        if [ -f "$target_file" ]; then
          exiftool -overwrite_original \
            -all= \
            -Artist="$AUTHOR" \
            -XMP-dc:Creator="$AUTHOR" \
            -Copyright="$COPY" \
            "$target_file" >/dev/null
          
          # 4) Re-stage the processed file
          git add -- "$target_file"
          echo "[pre-commit] ✓ EXIF processed and re-staged: $target_file"
          
          # 5) If original was converted, unstage the deleted JPG
          if [ "$target_file" != "$f" ]; then
            git rm --cached "$f" 2>/dev/null || true
            echo "[pre-commit] ✓ Removed original JPG from staging: $f"
          fi
        else
          echo "[pre-commit] ✗ Could not find target file: $target_file"
          exit 1
        fi
      ;;
    esac
  done
else
  echo "[pre-commit] No new/modified images in this commit."
fi

# ===== PART 2: Validate ALL existing images =====
echo
echo "[pre-commit] Step 2: Validating ALL images in repository..."

# Get all image files in the repository
all_images=$(git ls-files | grep -Ei '\.(jpe?g|png|webp)$' || true)

if [ -z "$all_images" ]; then
  echo "[pre-commit] No images found in repository."
  exit 0
fi

echo "[pre-commit] Checking $(echo "$all_images" | wc -l) images for watermarks and EXIF compliance..."

# Check watermarks on all images
echo "[pre-commit] Verifying watermarks..."
if ! "$PYTHON" "$WATERMARK_SCRIPT" verify $all_images; then
  echo "[pre-commit] ✗ Some images are missing watermarks!"
  exit 1
fi

# Check EXIF on all images (skip files in skip list)
echo "[pre-commit] Verifying EXIF compliance..."
bad_exif=0
for f in $all_images; do
  # Skip files that are in the skip list
  if [ "$f" = "assets/pics/lelem.png" ]; then
    echo "[pre-commit] ⏭ Skipping EXIF check for: $f"
    continue
  fi
  
  # Check for potentially sensitive metadata (GPS, camera settings, etc.)
  # Allow basic file info, dimensions, format info, and copyright fields
  sensitive=$(exiftool -s -S -all:all "$f" | grep -iE '^(GPS|Camera|Make|Model|SerialNumber|LensInfo|ExposureTime|ISO|FocalLength|Flash|WhiteBalance|MeteringMode|ExposureMode|SceneCaptureType|Orientation|Software|ModifyDate|CreateDate|DateTimeOriginal|UserComment|ImageDescription|XPComment|XPAuthor|XPKeywords|XPSubject|ProcessingSoftware|HostComputer|ThumbnailImage):' || true)
  if [ -n "$sensitive" ]; then
    echo "[pre-commit] ✗ $f contains sensitive metadata:"
    echo "$sensitive" | sed 's/^/    /'
    bad_exif=1
  fi
done

if [ $bad_exif -eq 1 ]; then
  echo "[pre-commit] ✗ Some images have unauthorized EXIF data!"
  exit 1
fi

echo "[pre-commit] ✓ All images passed validation!"
echo "[pre-commit] Image processing complete."
